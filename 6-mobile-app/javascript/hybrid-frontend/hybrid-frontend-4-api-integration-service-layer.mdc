---
description: USE WHEN intergrating APIs
globs: ["**/*"]
alwaysApply: false
---
# Hybrid API Integration and Service Layer

### Service Abstraction
- Create abstraction layer for all API interactions
- Handle errors at service boundaries, not in components
- Transform API responses to match application models
- Implement consistent request/response patterns
- Use proper HTTP methods and status code handling

### Loading State Management
- Track loading state for all async operations
- Handle concurrent requests appropriately
- Show appropriate UI feedback during loading
- Implement request cancellation for cleanup (e.g., using AbortController or cancellation tokens if supported)
- Use loading state to prevent duplicate requests

### Error Handling Strategies
- Catch and handle errors at appropriate levels
- Provide meaningful error messages to users
- Implement retry mechanisms for transient failures
- Log errors with sufficient context for debugging
- Handle network failures gracefully

### Subscription Lifecycle
- Unsubscribe from data sources on component cleanup
- Prevent memory leaks from active subscriptions
- Implement proper cleanup in useEffect or lifecycle equivalents
- Handle subscription errors gracefully